!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.chitchat=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
var parser   = _dereq_('./parser').parser
parser.lexer = _dereq_('./lexer')
parser.yy    = _dereq_('./runtime')

module.exports = {
  parse: function( code ) {
    return parser.parse( code )
  },
  eval: function( code, scope ) {
    if ( scope == null )
      scope = { being: function() {} }
    return parser.parse( code ).eval( scope )
  }
}

},{"./lexer":2,"./parser":3,"./runtime":4}],2:[function(_dereq_,module,exports){
var Lexer = _dereq_('lex')

var lexer = new Lexer

var keywords = ['a', 'an', 'has', 'when', 'is', 'told',
                'given', 'it', 'replies', 'her', 'his', 'its',
                'tell', 'kind', 'of', 'if', 'then', 'else']

var keywordAliases = { an: 'a', her: 'its', his: 'its' }

lexer.addRule(/a kind of/, function( lexeme ) {
  this.yytext = lexeme
  return "KINDOF"
})

lexer.addRule(/is told/, function( lexeme ) {
  this.yytext = lexeme
  return "TOLD"
})

lexer.addRule(/(she|he|it) replies/, function( lexeme ) {
  this.yytext = lexeme
  return "REPLIES"
})

lexer.addRule(/when (a|an)/, function( lexeme ) {
  this.yytext = lexeme
  return "WHEN"
})

lexer.addRule(/and|,/, function( lexeme ) {
  this.yytext = lexeme
  return "SEPARATOR"
})

lexer.addRule(/[a-z]\w*/i, function( lexeme ) {
  if ( keywords.indexOf( lexeme ) != -1 ) {
    var keyword = keywordAliases[ lexeme ] || lexeme
    return keyword.toUpperCase()
  } else {
    this.yytext = lexeme
    return "IDENTIFIER"
  }
})

lexer.addRule(/\d+/, function( lexeme ) {
  this.yytext = lexeme
  return "INTEGER"
})

lexer.addRule(/"([^"]*)"/, function( lexeme, str ) {
  this.yytext = str
  return "STRING"
})

lexer.addRule(/\n+/, function( lexeme ) {
  this.yytext = lexeme
  return "EOL"
})

lexer.addRule(/&&|\|\||!=|<=|>=/, function( lexeme ) {
  this.yytext = lexeme
  return lexeme
})

lexer.addRule(/\s+/, function() { /* ignore spaces */ })

lexer.addRule(/'s?/, function( lexeme ) {
  this.yytext = lexeme
  return "SQUOTE"
})

lexer.addRule(/\{/, function( lexeme ) {
  this.yytext = lexeme
  return "BLOCKSTART"
})

lexer.addRule(/\}/, function( lexeme ) {
  this.yytext = lexeme
  return "BLOCKEND"
})

lexer.addRule(/\+|\*|\-|\/|:|\(|\)|!|;|=|>|</, function( lexeme ) {
  this.yytext = lexeme
  return lexeme
})

module.exports = lexer

},{"lex":8}],3:[function(_dereq_,module,exports){
(function (process){
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"Expressions":4,"Expression":5,"Terminator":6,"Literal":7,"MethodCall":8,"Operator":9,"GetVar":10,"SetVar":11,"GetProp":12,"SetProp":13,"MethodDef":14,"ClassDef":15,"NewObject":16,"If":17,"Return":18,"(":19,")":20,"EOL":21,";":22,"INTEGER":23,"STRING":24,"TELL":25,"Arguments":26,"GIVEN":27,"ArgList":28,"Arg":29,"SEPARATOR":30,"IDENTIFIER":31,":":32,"||":33,"&&":34,"=":35,"!=":36,">":37,">=":38,"<":39,"<=":40,"*":41,"/":42,"+":43,"-":44,"IS":45,"SQUOTE":46,"ITS":47,"Block":48,"BLOCKSTART":49,"BLOCKEND":50,"WHEN":51,"TOLD":52,"MethodBody":53,"DefArguments":54,"DefArgList":55,"A":56,"KINDOF":57,"IF":58,"THEN":59,"ELSE":60,"REPLIES":61,"$accept":0,"$end":1},
terminals_: {2:"error",19:"(",20:")",21:"EOL",22:";",23:"INTEGER",24:"STRING",25:"TELL",27:"GIVEN",30:"SEPARATOR",31:"IDENTIFIER",32:":",33:"||",34:"&&",35:"=",36:"!=",37:">",38:">=",39:"<",40:"<=",41:"*",42:"/",43:"+",44:"-",45:"IS",46:"SQUOTE",47:"ITS",49:"BLOCKSTART",50:"BLOCKEND",51:"WHEN",52:"TOLD",56:"A",57:"KINDOF",58:"IF",59:"THEN",60:"ELSE",61:"REPLIES"},
productions_: [0,[3,0],[3,1],[4,1],[4,3],[4,2],[4,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[5,3],[6,1],[6,1],[7,1],[7,1],[8,3],[8,4],[26,4],[26,2],[28,1],[28,3],[29,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[11,3],[10,1],[13,5],[13,4],[12,3],[12,2],[48,3],[14,5],[14,6],[54,4],[54,2],[55,1],[55,3],[53,1],[53,1],[15,5],[16,2],[17,6],[17,6],[18,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new yy.AST.Expressions([]) 
break;
case 2: return new yy.AST.Expressions( $$[$0] ) 
break;
case 3: this.$ = [ $$[$0] ] 
break;
case 4: $$[$0-2].push( $$[$0] ); this.$ = $$[$0-2] 
break;
case 5: this.$ = $$[$0-1] 
break;
case 6: this.$ = [] 
break;
case 19: this.$ = $$[$0-1] 
break;
case 22: this.$ = new yy.AST.Integer( yytext ) 
break;
case 23: this.$ = new yy.AST.String( yytext ) 
break;
case 24: this.$ = new yy.AST.MethodCall( $$[$0-1], $$[$0], [] ) 
break;
case 25: this.$ = new yy.AST.MethodCall( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 26: this.$ = $$[$0-1] 
break;
case 27: this.$ = $$[$0] 
break;
case 28: this.$ = [ $$[$0] ] 
break;
case 29: $$[$0-2].push( $$[$0] ); this.$ = $$[$0-2] 
break;
case 30: this.$ = { name: $$[$0-2], value: $$[$0] } 
break;
case 31: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 32: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 33: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 34: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 35: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 36: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 37: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 38: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 39: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 40: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 41: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 42: this.$ = new yy.AST.Operator( $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 43: this.$ = new yy.AST.SetVar( $$[$0-2], $$[$0] ) 
break;
case 44: this.$ = new yy.AST.GetVar( yytext ) 
break;
case 45: this.$ = new yy.AST.SetProp( $$[$0-4], $$[$0-2], $$[$0] ) 
break;
case 46: this.$ = new yy.AST.SetProp( new yy.AST.Self, $$[$0-2], $$[$0] ) 
break;
case 47: this.$ = new yy.AST.GetProp( $$[$0-2], $$[$0] ) 
break;
case 48: this.$ = new yy.AST.GetProp( new yy.AST.Self, $$[$0] ) 
break;
case 49: this.$ = $$[$0-1] 
break;
case 50: this.$ = new yy.AST.MethodDef( $$[$0-3], $$[$0-1], [], $$[$0] ) 
break;
case 51: this.$ = new yy.AST.MethodDef( $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ) 
break;
case 52: this.$ = $$[$0-1] 
break;
case 53: this.$ = $$[$0] 
break;
case 54: this.$ = [ $$[$0] ] 
break;
case 55: $$[$0-2].push( $$[$0] ); this.$ = $$[$0-2] 
break;
case 56: this.$ = new yy.AST.Expressions([ $$[$0] ]) 
break;
case 57: this.$ = new yy.AST.Expressions( $$[$0] ) 
break;
case 58: this.$ = new yy.AST.ClassDef( $$[$0-3], $$[$0] ) 
break;
case 59: this.$ = new yy.AST.NewObject( $$[$0] ) 
break;
case 60: this.$ = new yy.AST.If( $$[$0-4], $$[$0-2], $$[$0] ) 
break;
case 61: this.$ = new yy.AST.If( $$[$0-4], $$[$0-2], $$[$0] ) 
break;
case 62: this.$ = new yy.AST.Return( $$[$0] ) 
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],21:[1,18],22:[1,19],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[3]},{1:[2,2],6:29,21:[1,18],22:[1,19]},{1:[2,3],21:[2,3],22:[2,3],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,3]},{1:[2,6],21:[2,6],22:[2,6],50:[2,6]},{1:[2,7],20:[2,7],21:[2,7],22:[2,7],30:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],38:[2,7],39:[2,7],40:[2,7],41:[2,7],42:[2,7],43:[2,7],44:[2,7],46:[2,7],50:[2,7],59:[2,7],60:[2,7]},{1:[2,8],20:[2,8],21:[2,8],22:[2,8],30:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],44:[2,8],46:[2,8],50:[2,8],59:[2,8],60:[2,8]},{1:[2,9],20:[2,9],21:[2,9],22:[2,9],30:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],44:[2,9],46:[2,9],50:[2,9],59:[2,9],60:[2,9]},{1:[2,10],20:[2,10],21:[2,10],22:[2,10],30:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10],46:[2,10],50:[2,10],59:[2,10],60:[2,10]},{1:[2,11],20:[2,11],21:[2,11],22:[2,11],30:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],46:[2,11],50:[2,11],59:[2,11],60:[2,11]},{1:[2,12],20:[2,12],21:[2,12],22:[2,12],30:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12],46:[2,12],50:[2,12],59:[2,12],60:[2,12]},{1:[2,13],20:[2,13],21:[2,13],22:[2,13],30:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],46:[2,13],50:[2,13],59:[2,13],60:[2,13]},{1:[2,14],20:[2,14],21:[2,14],22:[2,14],30:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14],46:[2,14],50:[2,14],59:[2,14],60:[2,14]},{1:[2,15],20:[2,15],21:[2,15],22:[2,15],30:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],44:[2,15],46:[2,15],50:[2,15],59:[2,15],60:[2,15]},{1:[2,16],20:[2,16],21:[2,16],22:[2,16],30:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16],46:[2,16],50:[2,16],59:[2,16],60:[2,16]},{1:[2,17],20:[2,17],21:[2,17],22:[2,17],30:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17],46:[2,17],50:[2,17],59:[2,17],60:[2,17]},{1:[2,18],20:[2,18],21:[2,18],22:[2,18],30:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],44:[2,18],46:[2,18],50:[2,18],59:[2,18],60:[2,18]},{5:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,20],19:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],31:[2,20],47:[2,20],50:[2,20],51:[2,20],56:[2,20],58:[2,20],61:[2,20]},{1:[2,21],19:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],31:[2,21],47:[2,21],50:[2,21],51:[2,21],56:[2,21],58:[2,21],61:[2,21]},{1:[2,22],20:[2,22],21:[2,22],22:[2,22],30:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],46:[2,22],50:[2,22],59:[2,22],60:[2,22]},{1:[2,23],20:[2,23],21:[2,23],22:[2,23],30:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23],46:[2,23],50:[2,23],59:[2,23],60:[2,23]},{10:44,31:[1,45]},{1:[2,44],20:[2,44],21:[2,44],22:[2,44],30:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[1,46],46:[2,44],50:[2,44],59:[2,44],60:[2,44]},{31:[1,47]},{31:[1,48]},{10:50,31:[1,49]},{5:51,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:52,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,5],5:53,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],21:[2,5],22:[2,5],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],50:[2,5],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:54,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:55,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:56,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:57,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:58,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:59,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:60,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:61,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:63,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:64,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:65,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{31:[1,66]},{20:[1,67],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42]},{24:[1,68]},{1:[2,44],20:[2,44],21:[2,44],22:[2,44],24:[2,44],30:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],46:[2,44],50:[2,44],59:[2,44],60:[2,44]},{5:69,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,48],20:[2,48],21:[2,48],22:[2,48],30:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[1,70],46:[2,48],50:[2,48],59:[2,48],60:[2,48]},{52:[1,71]},{1:[2,44],20:[2,44],21:[2,44],22:[2,44],30:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[1,72],46:[2,44],50:[2,44],59:[2,44],60:[2,44]},{1:[2,59],20:[2,59],21:[2,59],22:[2,59],30:[2,59],33:[2,59],34:[2,59],35:[2,59],36:[2,59],37:[2,59],38:[2,59],39:[2,59],40:[2,59],41:[2,59],42:[2,59],43:[2,59],44:[2,59],46:[2,59],50:[2,59],59:[2,59],60:[2,59]},{33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],59:[1,73]},{1:[2,62],20:[2,62],21:[2,62],22:[2,62],30:[2,62],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,62],59:[2,62],60:[2,62]},{1:[2,4],21:[2,4],22:[2,4],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,4]},{1:[2,31],20:[2,31],21:[2,31],22:[2,31],30:[2,31],33:[2,31],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,31],59:[2,31],60:[2,31]},{1:[2,32],20:[2,32],21:[2,32],22:[2,32],30:[2,32],33:[2,32],34:[2,32],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,32],59:[2,32],60:[2,32]},{1:[2,33],20:[2,33],21:[2,33],22:[2,33],30:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,33],59:[2,33],60:[2,33]},{1:[2,34],20:[2,34],21:[2,34],22:[2,34],30:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,34],59:[2,34],60:[2,34]},{1:[2,35],20:[2,35],21:[2,35],22:[2,35],30:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,35],59:[2,35],60:[2,35]},{1:[2,36],20:[2,36],21:[2,36],22:[2,36],30:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,36],59:[2,36],60:[2,36]},{1:[2,37],20:[2,37],21:[2,37],22:[2,37],30:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,37],59:[2,37],60:[2,37]},{1:[2,38],20:[2,38],21:[2,38],22:[2,38],30:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,38],59:[2,38],60:[2,38]},{1:[2,39],20:[2,39],21:[2,39],22:[2,39],30:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],46:[1,42],50:[2,39],59:[2,39],60:[2,39]},{1:[2,40],20:[2,40],21:[2,40],22:[2,40],30:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],46:[1,42],50:[2,40],59:[2,40],60:[2,40]},{1:[2,41],20:[2,41],21:[2,41],22:[2,41],30:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[1,38],42:[1,39],43:[2,41],44:[2,41],46:[1,42],50:[2,41],59:[2,41],60:[2,41]},{1:[2,42],20:[2,42],21:[2,42],22:[2,42],30:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[1,38],42:[1,39],43:[2,42],44:[2,42],46:[1,42],50:[2,42],59:[2,42],60:[2,42]},{1:[2,47],20:[2,47],21:[2,47],22:[2,47],30:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[1,74],46:[2,47],50:[2,47],59:[2,47],60:[2,47]},{1:[2,19],20:[2,19],21:[2,19],22:[2,19],30:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19],46:[2,19],50:[2,19],59:[2,19],60:[2,19]},{1:[2,24],19:[1,76],20:[2,24],21:[2,24],22:[2,24],26:75,27:[1,77],30:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],44:[2,24],46:[2,24],50:[2,24],59:[2,24],60:[2,24]},{1:[2,43],20:[2,43],21:[2,43],22:[2,43],30:[2,43],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,43],59:[2,43],60:[2,43]},{5:78,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{24:[1,79]},{57:[1,80]},{5:82,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],48:81,49:[1,83],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{5:84,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,25],20:[2,25],21:[2,25],22:[2,25],30:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],46:[2,25],50:[2,25],59:[2,25],60:[2,25]},{27:[1,85]},{28:86,29:87,31:[1,88]},{1:[2,46],20:[2,46],21:[2,46],22:[2,46],30:[2,46],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,46],59:[2,46],60:[2,46]},{18:91,19:[1,93],27:[1,94],48:92,49:[1,83],53:89,54:90,61:[1,28]},{10:95,31:[1,45]},{60:[1,96]},{33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],60:[1,97]},{4:98,5:3,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],21:[1,18],22:[1,19],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,45],20:[2,45],21:[2,45],22:[2,45],30:[2,45],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,45],59:[2,45],60:[2,45]},{28:99,29:87,31:[1,88]},{1:[2,27],20:[2,27],21:[2,27],22:[2,27],30:[1,100],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],46:[2,27],50:[2,27],59:[2,27],60:[2,27]},{1:[2,28],20:[2,28],21:[2,28],22:[2,28],30:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],46:[2,28],50:[2,28],59:[2,28],60:[2,28]},{32:[1,101]},{1:[2,50],20:[2,50],21:[2,50],22:[2,50],30:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],50:[2,50],59:[2,50],60:[2,50]},{18:91,48:92,49:[1,83],53:102,61:[1,28]},{1:[2,56],20:[2,56],21:[2,56],22:[2,56],30:[2,56],33:[2,56],34:[2,56],35:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],46:[2,56],50:[2,56],59:[2,56],60:[2,56]},{1:[2,57],20:[2,57],21:[2,57],22:[2,57],30:[2,57],33:[2,57],34:[2,57],35:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],43:[2,57],44:[2,57],46:[2,57],50:[2,57],59:[2,57],60:[2,57]},{27:[1,103]},{31:[1,105],55:104},{1:[2,58],20:[2,58],21:[2,58],22:[2,58],30:[2,58],33:[2,58],34:[2,58],35:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],46:[2,58],50:[2,58],59:[2,58],60:[2,58]},{48:106,49:[1,83]},{5:107,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{6:29,21:[1,18],22:[1,19],50:[1,108]},{20:[1,109],30:[1,100]},{29:110,31:[1,88]},{5:111,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:[1,17],23:[1,20],24:[1,21],25:[1,22],31:[1,23],47:[1,24],51:[1,25],56:[1,26],58:[1,27],61:[1,28]},{1:[2,51],20:[2,51],21:[2,51],22:[2,51],30:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],46:[2,51],50:[2,51],59:[2,51],60:[2,51]},{31:[1,105],55:112},{30:[1,113],49:[2,53],61:[2,53]},{20:[2,54],30:[2,54],49:[2,54],61:[2,54]},{1:[2,60],20:[2,60],21:[2,60],22:[2,60],30:[2,60],33:[2,60],34:[2,60],35:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],40:[2,60],41:[2,60],42:[2,60],43:[2,60],44:[2,60],46:[2,60],50:[2,60],59:[2,60],60:[2,60]},{1:[2,61],20:[2,61],21:[2,61],22:[2,61],30:[2,61],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,61],59:[2,61],60:[2,61]},{1:[2,49],20:[2,49],21:[2,49],22:[2,49],30:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],46:[2,49],50:[2,49],59:[2,49],60:[2,49]},{1:[2,26],20:[2,26],21:[2,26],22:[2,26],30:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],44:[2,26],46:[2,26],50:[2,26],59:[2,26],60:[2,26]},{1:[2,29],20:[2,29],21:[2,29],22:[2,29],30:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],44:[2,29],46:[2,29],50:[2,29],59:[2,29],60:[2,29]},{1:[2,30],20:[2,30],21:[2,30],22:[2,30],30:[2,30],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],42:[1,39],43:[1,40],44:[1,41],46:[1,42],50:[2,30],59:[2,30],60:[2,30]},{20:[1,114],30:[1,113]},{31:[1,115]},{49:[2,52],61:[2,52]},{20:[2,55],30:[2,55],49:[2,55],61:[2,55]}],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof _dereq_ !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = _dereq_('fs').readFileSync(_dereq_('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && _dereq_.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,_dereq_("JkpR2F"))
},{"JkpR2F":7,"fs":5,"path":6}],4:[function(_dereq_,module,exports){
var runtime = {
  Util: {
    merge: function() {
      var args = ([]).slice.call( arguments )
      var obj = {}
      for ( i in args ) {
        for ( key in args[ i ] ) {
          obj[ key ] = args[ i ][ key ]
        }
      }
      return obj
    }
  },

  AST: {
    Expressions: (function() {
      var klass = function( expressions ) {
        this.expressions = expressions
      }

      klass.prototype.eval = function( scope ) {
        var _return
        var returned = false
        this.expressions.forEach(function( expression ) {
          if ( returned === false ) {
            _return = expression.eval( scope )
          if ( expression.isReturn )
            returned = true
          }
        })
        return _return
      }

      return klass
    })(),

    Integer: (function() {
      var klass = function( str ) {
        this.value = Number( str )
      }

      klass.prototype.eval = function() {
        return this.value
      }

      return klass
    })(),

    String: (function() {
      var klass = function( str ) {
        this.value = str
      }

      klass.prototype.eval = function() {
        return this.value
      }

      return klass
    })(),

    MethodCall: (function() {
      var klass = function( receiver, message, args ) {
        this.receiver = receiver
        this.message  = message
        this.args     = args
      }

      klass.prototype.eval = function( scope ) {
        var args = this.args.reduce(function( obj, arg ) {
          obj[ arg.name ] = arg.value.eval( scope )
          return obj
        }, {})
        var receiver = this.receiver.eval( scope )
        return receiver[ this.message ]( runtime.Util.merge( args, { __self: receiver } ) )
      }

      return klass
    })(),

    Operator: (function() {
      var klass = function( left, operator, right ) {
        this.left     = left
        this.operator = operator
        this.right    = right
      }

      klass.prototype.eval = function( scope ) {
        switch ( this.operator ) {
          case '||':
            return this.left.eval( scope ) || this.right.eval( scope )
          case '&&':
            return this.left.eval( scope ) && this.right.eval( scope )
          case '=':
            return this.left.eval( scope ) == this.right.eval( scope )
          case '!=':
            return this.left.eval( scope ) != this.right.eval( scope )
          case '>':
            return this.left.eval( scope ) > this.right.eval( scope )
          case '>=':
            return this.left.eval( scope ) >= this.right.eval( scope )
          case '<':
            return this.left.eval( scope ) < this.right.eval( scope )
          case '<=':
            return this.left.eval( scope ) <= this.right.eval( scope )
          case '*':
            return this.left.eval( scope ) * this.right.eval( scope )
          case '/':
            return this.left.eval( scope ) / this.right.eval( scope )
          case '+':
            return this.left.eval( scope ) + this.right.eval( scope )
          case '-':
            return this.left.eval( scope ) - this.right.eval( scope )
          default:
            throw "Unknown operator " + this.operator
        }
      }

      return klass
    })(),

    GetVar: (function() {
      var klass = function( name ) {
        this.name = name
      }

      klass.prototype.eval = function( scope ) {
        return scope[ this.name ]
      }

      return klass
    })(),

    SetVar: (function() {
      var klass = function( name, value ) {
        this.name  = name
        this.value = value
      }

      klass.prototype.eval = function( scope ) {
        var value = this.value.eval( scope )
        scope[ this.name ] = value
        return value
      }

      return klass
    })(),

    SetProp: (function() {
      var klass = function( object, property, value ) {
        this.object   = object
        this.property = property
        this.value    = value
      }

      klass.prototype.eval = function( scope ) {
        var object = this.object.eval( scope )
        var value  = this.value.eval( scope )
        object[ this.property ] = value
        return value
      }

      return klass
    })(),

    GetProp: (function() {
      var klass = function( object, property ) {
        this.object   = object
        this.property = property
      }

      klass.prototype.eval = function( scope ) {
        return this.object.eval( scope )[ this.property ]
      }

      return klass
    })(),

    MethodDef: (function() {
      var klass = function( className, message, args, body ) {
        this.className = className
        this.message   = message
        this.args      = args
        this.body      = body
      }

      klass.prototype.eval = function( scope ) {
        var _class = scope[ this.className ]
        var self = this
        if ( _class == null )
          throw "Undefined class " + this.className
        _class.prototype[ this.message ] = function( callArgs ) {
          var callNames = Object.keys( callArgs ).sort().filter(function( a ) { return a != '__self' })
          if ( !self.args.sort().every( function( arg, i ) { return arg == callNames[i] } ) )
            throw 'Invalid arguments. Expected: ' + self.args.join(', ') + '. given: ' + callNames.join(', ')
          return self.body.eval( runtime.Util.merge( scope, callArgs ) )
        }
        return _class
      }

      return klass
    })(),

    ClassDef: (function() {
      var klass = function( name, superclass ) {
        this.name       = name
        this.superclass = superclass
      }

      klass.prototype.eval = function( scope ) {
        var _class     = function() {}
        var superclass = this.superclass.eval( scope )
        _class.prototype = Object.create( superclass.prototype )
        scope[ this.name ] = _class
        return _class
      }

      return klass
    })(),

    NewObject: (function() {
      var klass = function( _class ) {
        this._class = _class
      }

      klass.prototype.eval = function( scope ) {
        var _class = this._class.eval( scope )
        return new _class()
      }

      return klass
    })(),

    If: (function() {
      var klass = function( condition, thenBlock, elseBlock ) {
        this.condition = condition
        this.thenBlock = thenBlock
        this.elseBlock = elseBlock
      }

      klass.prototype.eval = function( scope ) {
        if ( this.condition.eval( scope ) )
          return this.thenBlock.eval( scope )
        else
          return this.elseBlock.eval( scope )
      }

      return klass
    })(),

    Self: (function() {
      var klass = function() {}

      klass.prototype.eval = function( scope ) {
        return scope.__self
      }

      return klass
    })(),

    Return: (function() {
      var klass = function( expression ) {
        this.expression = expression
      }

      klass.prototype.eval = function( scope ) {
        return this.expression.eval( scope )
      }
      
      klass.prototype.isReturn = true

      return klass
    })()
  }
}

module.exports = runtime

},{}],5:[function(_dereq_,module,exports){

},{}],6:[function(_dereq_,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,_dereq_("JkpR2F"))
},{"JkpR2F":7}],7:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],8:[function(_dereq_,module,exports){
if (typeof module === "object" && typeof module.exports === "object") module.exports = Lexer;

Lexer.defunct = function (char) {
    throw new Error("Unexpected character at index " + (this.index - 1) + ": " + char);
};

function Lexer(defunct) {
    if (typeof defunct !== "function") defunct = Lexer.defunct;

    var tokens = [];
    var rules = [];
    var remove = 0;
    this.state = 0;
    this.index = 0;
    this.input = "";

    this.addRule = function (pattern, action, start) {
        var global = pattern.global;

        if (!global) {
            var flags = "g";
            if (pattern.multiline) flags += "m";
            if (pattern.ignoreCase) flags += "i";
            pattern = new RegExp(pattern.source, flags);
        }

        if (Object.prototype.toString.call(start) !== "[object Array]") start = [0];

        rules.push({
            pattern: pattern,
            global: global,
            action: action,
            start: start
        });

        return this;
    };

    this.setInput = function (input) {
        remove = 0;
        this.state = 0;
        this.index = 0;
        this.input = input;
        return this;
    };

    this.lex = function () {
        if (tokens.length) return tokens.shift();

        this.reject = true;

        while (this.index <= this.input.length) {
            var matches = scan.call(this).splice(remove);
            var index = this.index;

            while (matches.length) {
                if (this.reject) {
                    var match = matches.shift();
                    var result = match.result;
                    var length = match.length;
                    this.index += length;
                    this.reject = false;
                    remove++;

                    var token = match.action.apply(this, result);
                    if (this.reject) this.index = result.index;
                    else if (typeof token !== "undefined") {
                        switch (Object.prototype.toString.call(token)) {
                        case "[object Array]":
                            tokens = token.slice(1);
                            token = token[0];
                        default:
                            if (length) remove = 0;
                            return token;
                        }
                    }
                } else break;
            }

            var input = this.input;

            if (index < input.length) {
                if (this.reject) {
                    remove = 0;
                    var token = defunct.call(this, input.charAt(this.index++));
                    if (typeof token !== "undefined") {
                        if (Object.prototype.toString.call(token) === "[object Array]") {
                            tokens = token.slice(1);
                            return token[0];
                        } else return token;
                    }
                } else {
                    if (this.index !== index) remove = 0;
                    this.reject = true;
                }
            } else if (matches.length)
                this.reject = true;
            else break;
        }
    };

    function scan() {
        var matches = [];
        var index = 0;

        var state = this.state;
        var lastIndex = this.index;
        var input = this.input;

        for (var i = 0, length = rules.length; i < length; i++) {
            var rule = rules[i];
            var start = rule.start;
            var states = start.length;

            if ((!states || start.indexOf(state) >= 0) ||
                (state % 2 && states === 1 && !start[0])) {
                var pattern = rule.pattern;
                pattern.lastIndex = lastIndex;
                var result = pattern.exec(input);

                if (result && result.index === lastIndex) {
                    var j = matches.push({
                        result: result,
                        action: rule.action,
                        length: result[0].length
                    });

                    if (rule.global) index = j;

                    while (--j > index) {
                        var k = j - 1;

                        if (matches[j].length > matches[k].length) {
                            var temple = matches[j];
                            matches[j] = matches[k];
                            matches[k] = temple;
                        }
                    }
                }
            }
        }

        return matches;
    }
}

},{}]},{},[1])
(1)
});